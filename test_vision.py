#!/usr/bin/env python3
"""
Debug script dla Vision Engine
Uruchom: python test_vision.py
"""

import sys
import os
from pathlib import Path
# Fix Tesseract PATH
import os
try:
    import pytesseract
    tesseract_paths = [
        r'C:\Program Files\Tesseract-OCR\tesseract.exe',
        r'C:\Program Files (x86)\Tesseract-OCR\tesseract.exe',
    ]
    for path in tesseract_paths:
        if os.path.exists(path):
            pytesseract.pytesseract.tesseract_cmd = path
            break
except ImportError:
    pass
# Dodaj src do path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))


def test_basic_imports():
    """Test podstawowych import√≥w"""
    print("=== TEST PODSTAWOWYCH IMPORT√ìW ===")

    try:
        import cv2
        print(f"‚úì OpenCV: {cv2.__version__}")
    except ImportError as e:
        print(f"‚úó OpenCV: {e}")
        return False

    try:
        import numpy as np
        print(f"‚úì NumPy: {np.__version__}")
    except ImportError as e:
        print(f"‚úó NumPy: {e}")
        return False

    return True


def test_tesseract():
    """Test Tesseract OCR"""
    print("\n=== TEST TESSERACT OCR ===")

    try:
        import pytesseract
        print("‚úì pytesseract zaimportowany")

        # Test czy tesseract executable jest dostƒôpny
        version = pytesseract.get_tesseract_version()
        print(f"‚úì Tesseract wersja: {version}")
        return True

    except ImportError:
        print("‚úó pytesseract nie zainstalowany")
        print("  Zainstaluj: pip install pytesseract")
        return False
    except Exception as e:
        print(f"‚úó Tesseract executable nie znaleziony: {e}")
        print("  Zainstaluj Tesseract OCR:")
        print("  Windows: winget install UB-Mannheim.TesseractOCR")
        return False


def test_vision_structure():
    """Test struktury folder√≥w vision"""
    print("\n=== TEST STRUKTURY VISION ===")

    vision_path = src_path / "vision"

    required_files = [
        "__init__.py",
        "template_matcher.py",
        "vision_engine.py",
        "object_detector.py"
    ]

    all_exists = True

    for file in required_files:
        file_path = vision_path / file
        if file_path.exists():
            print(f"‚úì {file}")

            # Sprawd≈∫ czy plik nie jest pusty (opr√≥cz __init__.py)
            if file != "__init__.py":
                if file_path.stat().st_size == 0:
                    print(f"  ‚ö† {file} jest pusty!")
                    all_exists = False
                else:
                    print(f"  üì¶ {file}: {file_path.stat().st_size} bajt√≥w")
        else:
            print(f"‚úó {file} - BRAKUJE")
            all_exists = False

    return all_exists


def test_template_matcher():
    """Test TemplateMatcher"""
    print("\n=== TEST TEMPLATE MATCHER ===")

    try:
        from vision.template_matcher import TemplateMatcher
        print("‚úì TemplateMatcher zaimportowany")

        # Test inicjalizacji
        matcher = TemplateMatcher("data/templates")
        print("‚úì TemplateMatcher zainicjalizowany")

        # Test podstawowych metod
        templates = matcher.get_template_list()
        categories = matcher.get_categories()

        print(f"‚úì Templates: {len(templates)}")
        print(f"‚úì Categories: {categories}")

        return True

    except ImportError as e:
        print(f"‚úó Import error: {e}")
        return False
    except Exception as e:
        print(f"‚úó Runtime error: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_vision_engine():
    """Test VisionEngine"""
    print("\n=== TEST VISION ENGINE ===")

    try:
        from vision.vision_engine import VisionEngine
        print("‚úì VisionEngine zaimportowany")

        # Test config
        config = {
            'paths': {
                'templates': 'data/templates'
            }
        }

        engine = VisionEngine(config)
        print("‚úì VisionEngine zainicjalizowany")
        print(f"‚úì OCR dostƒôpny: {engine.ocr_available}")

        return True

    except ImportError as e:
        print(f"‚úó Import error: {e}")
        import traceback
        traceback.print_exc()
        return False
    except Exception as e:
        print(f"‚úó Runtime error: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_object_detector():
    """Test ObjectDetector"""
    print("\n=== TEST OBJECT DETECTOR ===")

    try:
        from vision.object_detector import BasicObjectDetector
        print("‚úì BasicObjectDetector zaimportowany")

        detector = BasicObjectDetector()
        print("‚úì BasicObjectDetector zainicjalizowany")

        return True

    except ImportError as e:
        print(f"‚úó Import error: {e}")
        return False
    except Exception as e:
        print(f"‚úó Runtime error: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_full_integration():
    """Test pe≈Çnej integracji"""
    print("\n=== TEST PE≈ÅNEJ INTEGRACJI ===")

    try:
        import cv2
        import numpy as np
        from vision.vision_engine import VisionEngine

        # Stw√≥rz testowy obraz
        test_image = np.zeros((100, 100, 3), dtype=np.uint8)
        test_image[25:75, 25:75] = [0, 255, 0]  # Zielony kwadrat

        config = {
            'paths': {
                'templates': 'data/templates'
            }
        }

        engine = VisionEngine(config)
        results = engine.analyze_image(test_image)

        print("‚úì Analiza obrazu zako≈Ñczona")
        print(f"  Templates: {len(results['templates'])}")
        print(f"  Health bars: {len(results['colors']['health_bars'])}")
        print(f"  Mana bars: {len(results['colors']['mana_bars'])}")
        print(f"  Text regions: {len(results['text'])}")
        print(f"  UI elements: {len(results['ui_elements']['elements'])}")

        return True

    except Exception as e:
        print(f"‚úó Integration test failed: {e}")
        import traceback
        traceback.print_exc()
        return False


def check_paths():
    """Sprawd≈∫ ≈õcie≈ºki"""
    print("\n=== SPRAWDZENIE ≈öCIE≈ªEK ===")

    print(f"Bie≈ºƒÖcy katalog: {os.getcwd()}")
    print(f"Python path: {sys.path[:3]}...")
    print(f"src path: {src_path}")
    print(f"src exists: {src_path.exists()}")

    if src_path.exists():
        vision_path = src_path / "vision"
        print(f"vision path: {vision_path}")
        print(f"vision exists: {vision_path.exists()}")

        if vision_path.exists():
            files = list(vision_path.glob("*.py"))
            print(f"Python files w vision: {[f.name for f in files]}")


def main():
    """G≈Ç√≥wna funkcja testowa"""
    print("üîç VISION ENGINE DEBUG TOOL")
    print("=" * 50)

    tests = [
        ("Sprawdzenie ≈õcie≈ºek", check_paths),
        ("Podstawowe importy", test_basic_imports),
        ("Struktura Vision", test_vision_structure),
        ("Tesseract OCR", test_tesseract),
        ("Template Matcher", test_template_matcher),
        ("Vision Engine", test_vision_engine),
        ("Object Detector", test_object_detector),
        ("Pe≈Çna integracja", test_full_integration)
    ]

    results = {}

    for test_name, test_func in tests:
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            print(f"\nüí• CRASH w te≈õcie '{test_name}': {e}")
            import traceback
            traceback.print_exc()
            results[test_name] = False

    # Podsumowanie
    print("\n" + "=" * 50)
    print("üìä PODSUMOWANIE TEST√ìW")
    print("=" * 50)

    passed = 0
    total = len(results)

    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1

    print(f"\nWynik: {passed}/{total} test√≥w przesz≈Ço")

    if passed == total:
        print("üéâ Wszystko dzia≈Ça! Vision Engine jest gotowy.")
    else:
        print("‚ö†Ô∏è  Niekt√≥re testy nie przesz≈Çy. Sprawd≈∫ b≈Çƒôdy powy≈ºej.")

        # Sugestie napraw
        print("\nüîß SUGESTIE NAPRAW:")

        if not results.get("Podstawowe importy", True):
            print("- Zainstaluj: pip install opencv-python numpy")

        if not results.get("Tesseract OCR", True):
            print("- Zainstaluj: pip install pytesseract")
            print("- Zainstaluj Tesseract: winget install UB-Mannheim.TesseractOCR")

        if not results.get("Struktura Vision", True):
            print("- Sprawd≈∫ czy wszystkie pliki .py sƒÖ w src/vision/")
            print("- Sprawd≈∫ czy pliki nie sƒÖ puste")


if __name__ == "__main__":
    main()